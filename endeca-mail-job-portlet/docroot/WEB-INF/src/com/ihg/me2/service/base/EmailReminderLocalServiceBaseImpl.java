/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.me2.service.base;

import com.ihg.me2.model.EmailReminder;
import com.ihg.me2.service.EmailReminderLocalService;
import com.ihg.me2.service.persistence.EmailAttachmentPersistence;
import com.ihg.me2.service.persistence.EmailReminderPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the email reminder local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ihg.me2.service.impl.EmailReminderLocalServiceImpl}.
 * </p>
 *
 * @author vishal.rangras
 * @see com.ihg.me2.service.impl.EmailReminderLocalServiceImpl
 * @see com.ihg.me2.service.EmailReminderLocalServiceUtil
 * @generated
 */
public abstract class EmailReminderLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements EmailReminderLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.ihg.me2.service.EmailReminderLocalServiceUtil} to access the email reminder local service.
	 */

	/**
	 * Adds the email reminder to the database. Also notifies the appropriate model listeners.
	 *
	 * @param emailReminder the email reminder
	 * @return the email reminder that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EmailReminder addEmailReminder(EmailReminder emailReminder)
		throws SystemException {
		emailReminder.setNew(true);

		return emailReminderPersistence.update(emailReminder);
	}

	/**
	 * Creates a new email reminder with the primary key. Does not add the email reminder to the database.
	 *
	 * @param emailReminderId the primary key for the new email reminder
	 * @return the new email reminder
	 */
	@Override
	public EmailReminder createEmailReminder(long emailReminderId) {
		return emailReminderPersistence.create(emailReminderId);
	}

	/**
	 * Deletes the email reminder with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param emailReminderId the primary key of the email reminder
	 * @return the email reminder that was removed
	 * @throws PortalException if a email reminder with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EmailReminder deleteEmailReminder(long emailReminderId)
		throws PortalException, SystemException {
		return emailReminderPersistence.remove(emailReminderId);
	}

	/**
	 * Deletes the email reminder from the database. Also notifies the appropriate model listeners.
	 *
	 * @param emailReminder the email reminder
	 * @return the email reminder that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public EmailReminder deleteEmailReminder(EmailReminder emailReminder)
		throws SystemException {
		return emailReminderPersistence.remove(emailReminder);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(EmailReminder.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return emailReminderPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.me2.model.impl.EmailReminderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return emailReminderPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.me2.model.impl.EmailReminderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return emailReminderPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return emailReminderPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return emailReminderPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public EmailReminder fetchEmailReminder(long emailReminderId)
		throws SystemException {
		return emailReminderPersistence.fetchByPrimaryKey(emailReminderId);
	}

	/**
	 * Returns the email reminder with the primary key.
	 *
	 * @param emailReminderId the primary key of the email reminder
	 * @return the email reminder
	 * @throws PortalException if a email reminder with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public EmailReminder getEmailReminder(long emailReminderId)
		throws PortalException, SystemException {
		return emailReminderPersistence.findByPrimaryKey(emailReminderId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return emailReminderPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the email reminders.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ihg.me2.model.impl.EmailReminderModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of email reminders
	 * @param end the upper bound of the range of email reminders (not inclusive)
	 * @return the range of email reminders
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<EmailReminder> getEmailReminders(int start, int end)
		throws SystemException {
		return emailReminderPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of email reminders.
	 *
	 * @return the number of email reminders
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getEmailRemindersCount() throws SystemException {
		return emailReminderPersistence.countAll();
	}

	/**
	 * Updates the email reminder in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param emailReminder the email reminder
	 * @return the email reminder that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public EmailReminder updateEmailReminder(EmailReminder emailReminder)
		throws SystemException {
		return emailReminderPersistence.update(emailReminder);
	}

	/**
	 * Returns the email attachment local service.
	 *
	 * @return the email attachment local service
	 */
	public com.ihg.me2.service.EmailAttachmentLocalService getEmailAttachmentLocalService() {
		return emailAttachmentLocalService;
	}

	/**
	 * Sets the email attachment local service.
	 *
	 * @param emailAttachmentLocalService the email attachment local service
	 */
	public void setEmailAttachmentLocalService(
		com.ihg.me2.service.EmailAttachmentLocalService emailAttachmentLocalService) {
		this.emailAttachmentLocalService = emailAttachmentLocalService;
	}

	/**
	 * Returns the email attachment remote service.
	 *
	 * @return the email attachment remote service
	 */
	public com.ihg.me2.service.EmailAttachmentService getEmailAttachmentService() {
		return emailAttachmentService;
	}

	/**
	 * Sets the email attachment remote service.
	 *
	 * @param emailAttachmentService the email attachment remote service
	 */
	public void setEmailAttachmentService(
		com.ihg.me2.service.EmailAttachmentService emailAttachmentService) {
		this.emailAttachmentService = emailAttachmentService;
	}

	/**
	 * Returns the email attachment persistence.
	 *
	 * @return the email attachment persistence
	 */
	public EmailAttachmentPersistence getEmailAttachmentPersistence() {
		return emailAttachmentPersistence;
	}

	/**
	 * Sets the email attachment persistence.
	 *
	 * @param emailAttachmentPersistence the email attachment persistence
	 */
	public void setEmailAttachmentPersistence(
		EmailAttachmentPersistence emailAttachmentPersistence) {
		this.emailAttachmentPersistence = emailAttachmentPersistence;
	}

	/**
	 * Returns the email reminder local service.
	 *
	 * @return the email reminder local service
	 */
	public com.ihg.me2.service.EmailReminderLocalService getEmailReminderLocalService() {
		return emailReminderLocalService;
	}

	/**
	 * Sets the email reminder local service.
	 *
	 * @param emailReminderLocalService the email reminder local service
	 */
	public void setEmailReminderLocalService(
		com.ihg.me2.service.EmailReminderLocalService emailReminderLocalService) {
		this.emailReminderLocalService = emailReminderLocalService;
	}

	/**
	 * Returns the email reminder remote service.
	 *
	 * @return the email reminder remote service
	 */
	public com.ihg.me2.service.EmailReminderService getEmailReminderService() {
		return emailReminderService;
	}

	/**
	 * Sets the email reminder remote service.
	 *
	 * @param emailReminderService the email reminder remote service
	 */
	public void setEmailReminderService(
		com.ihg.me2.service.EmailReminderService emailReminderService) {
		this.emailReminderService = emailReminderService;
	}

	/**
	 * Returns the email reminder persistence.
	 *
	 * @return the email reminder persistence
	 */
	public EmailReminderPersistence getEmailReminderPersistence() {
		return emailReminderPersistence;
	}

	/**
	 * Sets the email reminder persistence.
	 *
	 * @param emailReminderPersistence the email reminder persistence
	 */
	public void setEmailReminderPersistence(
		EmailReminderPersistence emailReminderPersistence) {
		this.emailReminderPersistence = emailReminderPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.ihg.me2.model.EmailReminder",
			emailReminderLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.ihg.me2.model.EmailReminder");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return EmailReminder.class;
	}

	protected String getModelClassName() {
		return EmailReminder.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = emailReminderPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.ihg.me2.service.EmailAttachmentLocalService.class)
	protected com.ihg.me2.service.EmailAttachmentLocalService emailAttachmentLocalService;
	@BeanReference(type = com.ihg.me2.service.EmailAttachmentService.class)
	protected com.ihg.me2.service.EmailAttachmentService emailAttachmentService;
	@BeanReference(type = EmailAttachmentPersistence.class)
	protected EmailAttachmentPersistence emailAttachmentPersistence;
	@BeanReference(type = com.ihg.me2.service.EmailReminderLocalService.class)
	protected com.ihg.me2.service.EmailReminderLocalService emailReminderLocalService;
	@BeanReference(type = com.ihg.me2.service.EmailReminderService.class)
	protected com.ihg.me2.service.EmailReminderService emailReminderService;
	@BeanReference(type = EmailReminderPersistence.class)
	protected EmailReminderPersistence emailReminderPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private EmailReminderLocalServiceClpInvoker _clpInvoker = new EmailReminderLocalServiceClpInvoker();
}