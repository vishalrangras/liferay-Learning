/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.me2.model.impl;

import com.ihg.me2.model.EmailReminder;
import com.ihg.me2.model.EmailReminderModel;
import com.ihg.me2.model.EmailReminderSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmailReminder service. Represents a row in the &quot;email_reminder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.me2.model.EmailReminderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailReminderImpl}.
 * </p>
 *
 * @author vishal.rangras
 * @see EmailReminderImpl
 * @see com.ihg.me2.model.EmailReminder
 * @see com.ihg.me2.model.EmailReminderModel
 * @generated
 */
@JSON(strict = true)
public class EmailReminderModelImpl extends BaseModelImpl<EmailReminder>
	implements EmailReminderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email reminder model instance should use the {@link com.ihg.me2.model.EmailReminder} interface instead.
	 */
	public static final String TABLE_NAME = "email_reminder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "EMAIL_REMINDER_ID", Types.BIGINT },
			{ "SUBMITTER_NM", Types.VARCHAR },
			{ "SUBMITTER_EMAIL_ID", Types.VARCHAR },
			{ "REMINDER_NBR", Types.INTEGER },
			{ "SCHED_TS", Types.TIMESTAMP },
			{ "EMAIL_SUBJECT_TXT", Types.VARCHAR },
			{ "EMAIL_BODY_TXT", Types.VARCHAR },
			{ "STAT_CD", Types.VARCHAR },
			{ "CREAT_USR_ID", Types.VARCHAR },
			{ "CREAT_TS", Types.TIMESTAMP },
			{ "LST_UPDT_USR_ID", Types.VARCHAR },
			{ "LST_UPDT_TS", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table email_reminder (EMAIL_REMINDER_ID LONG not null primary key,SUBMITTER_NM VARCHAR(150) null,SUBMITTER_EMAIL_ID VARCHAR(100) null,REMINDER_NBR INTEGER,SCHED_TS DATE null,EMAIL_SUBJECT_TXT VARCHAR(250) null,EMAIL_BODY_TXT STRING null,STAT_CD VARCHAR(75) null,CREAT_USR_ID VARCHAR(50) null,CREAT_TS DATE null,LST_UPDT_USR_ID VARCHAR(50) null,LST_UPDT_TS DATE null)";
	public static final String TABLE_SQL_DROP = "drop table email_reminder";
	public static final String ORDER_BY_JPQL = " ORDER BY emailReminder.emailReminderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY email_reminder.EMAIL_REMINDER_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.me2.model.EmailReminder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.me2.model.EmailReminder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.me2.model.EmailReminder"),
			true);
	public static long EMAILREMINDERID_COLUMN_BITMASK = 1L;
	public static long SCHEDULETIMESTAMP_COLUMN_BITMASK = 2L;
	public static long STATUSCODE_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmailReminder toModel(EmailReminderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmailReminder model = new EmailReminderImpl();

		model.setEmailReminderId(soapModel.getEmailReminderId());
		model.setSubmitterName(soapModel.getSubmitterName());
		model.setSubmitterEmailId(soapModel.getSubmitterEmailId());
		model.setReminderNumber(soapModel.getReminderNumber());
		model.setScheduleTimestamp(soapModel.getScheduleTimestamp());
		model.setEmailSubjectText(soapModel.getEmailSubjectText());
		model.setEmailBodyText(soapModel.getEmailBodyText());
		model.setStatusCode(soapModel.getStatusCode());
		model.setCreateUserId(soapModel.getCreateUserId());
		model.setCreateTimestamp(soapModel.getCreateTimestamp());
		model.setLastUpdateUserId(soapModel.getLastUpdateUserId());
		model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmailReminder> toModels(EmailReminderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmailReminder> models = new ArrayList<EmailReminder>(soapModels.length);

		for (EmailReminderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.me2.model.EmailReminder"));

	public EmailReminderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _emailReminderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmailReminderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _emailReminderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailReminder.class;
	}

	@Override
	public String getModelClassName() {
		return EmailReminder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("emailReminderId", getEmailReminderId());
		attributes.put("submitterName", getSubmitterName());
		attributes.put("submitterEmailId", getSubmitterEmailId());
		attributes.put("reminderNumber", getReminderNumber());
		attributes.put("scheduleTimestamp", getScheduleTimestamp());
		attributes.put("emailSubjectText", getEmailSubjectText());
		attributes.put("emailBodyText", getEmailBodyText());
		attributes.put("statusCode", getStatusCode());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("createTimestamp", getCreateTimestamp());
		attributes.put("lastUpdateUserId", getLastUpdateUserId());
		attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long emailReminderId = (Long)attributes.get("emailReminderId");

		if (emailReminderId != null) {
			setEmailReminderId(emailReminderId);
		}

		String submitterName = (String)attributes.get("submitterName");

		if (submitterName != null) {
			setSubmitterName(submitterName);
		}

		String submitterEmailId = (String)attributes.get("submitterEmailId");

		if (submitterEmailId != null) {
			setSubmitterEmailId(submitterEmailId);
		}

		Integer reminderNumber = (Integer)attributes.get("reminderNumber");

		if (reminderNumber != null) {
			setReminderNumber(reminderNumber);
		}

		Date scheduleTimestamp = (Date)attributes.get("scheduleTimestamp");

		if (scheduleTimestamp != null) {
			setScheduleTimestamp(scheduleTimestamp);
		}

		String emailSubjectText = (String)attributes.get("emailSubjectText");

		if (emailSubjectText != null) {
			setEmailSubjectText(emailSubjectText);
		}

		String emailBodyText = (String)attributes.get("emailBodyText");

		if (emailBodyText != null) {
			setEmailBodyText(emailBodyText);
		}

		String statusCode = (String)attributes.get("statusCode");

		if (statusCode != null) {
			setStatusCode(statusCode);
		}

		String createUserId = (String)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Date createTimestamp = (Date)attributes.get("createTimestamp");

		if (createTimestamp != null) {
			setCreateTimestamp(createTimestamp);
		}

		String lastUpdateUserId = (String)attributes.get("lastUpdateUserId");

		if (lastUpdateUserId != null) {
			setLastUpdateUserId(lastUpdateUserId);
		}

		Date lastUpdateTimestamp = (Date)attributes.get("lastUpdateTimestamp");

		if (lastUpdateTimestamp != null) {
			setLastUpdateTimestamp(lastUpdateTimestamp);
		}
	}

	@JSON
	@Override
	public long getEmailReminderId() {
		return _emailReminderId;
	}

	@Override
	public void setEmailReminderId(long emailReminderId) {
		_columnBitmask |= EMAILREMINDERID_COLUMN_BITMASK;

		if (!_setOriginalEmailReminderId) {
			_setOriginalEmailReminderId = true;

			_originalEmailReminderId = _emailReminderId;
		}

		_emailReminderId = emailReminderId;
	}

	public long getOriginalEmailReminderId() {
		return _originalEmailReminderId;
	}

	@JSON
	@Override
	public String getSubmitterName() {
		if (_submitterName == null) {
			return StringPool.BLANK;
		}
		else {
			return _submitterName;
		}
	}

	@Override
	public void setSubmitterName(String submitterName) {
		_submitterName = submitterName;
	}

	@JSON
	@Override
	public String getSubmitterEmailId() {
		if (_submitterEmailId == null) {
			return StringPool.BLANK;
		}
		else {
			return _submitterEmailId;
		}
	}

	@Override
	public void setSubmitterEmailId(String submitterEmailId) {
		_submitterEmailId = submitterEmailId;
	}

	@JSON
	@Override
	public int getReminderNumber() {
		return _reminderNumber;
	}

	@Override
	public void setReminderNumber(int reminderNumber) {
		_reminderNumber = reminderNumber;
	}

	@JSON
	@Override
	public Date getScheduleTimestamp() {
		return _scheduleTimestamp;
	}

	@Override
	public void setScheduleTimestamp(Date scheduleTimestamp) {
		_columnBitmask |= SCHEDULETIMESTAMP_COLUMN_BITMASK;

		if (_originalScheduleTimestamp == null) {
			_originalScheduleTimestamp = _scheduleTimestamp;
		}

		_scheduleTimestamp = scheduleTimestamp;
	}

	public Date getOriginalScheduleTimestamp() {
		return _originalScheduleTimestamp;
	}

	@JSON
	@Override
	public String getEmailSubjectText() {
		if (_emailSubjectText == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailSubjectText;
		}
	}

	@Override
	public void setEmailSubjectText(String emailSubjectText) {
		_emailSubjectText = emailSubjectText;
	}

	@JSON
	@Override
	public String getEmailBodyText() {
		if (_emailBodyText == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailBodyText;
		}
	}

	@Override
	public void setEmailBodyText(String emailBodyText) {
		_emailBodyText = emailBodyText;
	}

	@JSON
	@Override
	public String getStatusCode() {
		if (_statusCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusCode;
		}
	}

	@Override
	public void setStatusCode(String statusCode) {
		_columnBitmask |= STATUSCODE_COLUMN_BITMASK;

		if (_originalStatusCode == null) {
			_originalStatusCode = _statusCode;
		}

		_statusCode = statusCode;
	}

	public String getOriginalStatusCode() {
		return GetterUtil.getString(_originalStatusCode);
	}

	@JSON
	@Override
	public String getCreateUserId() {
		if (_createUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _createUserId;
		}
	}

	@Override
	public void setCreateUserId(String createUserId) {
		_createUserId = createUserId;
	}

	@JSON
	@Override
	public Date getCreateTimestamp() {
		return _createTimestamp;
	}

	@Override
	public void setCreateTimestamp(Date createTimestamp) {
		_createTimestamp = createTimestamp;
	}

	@JSON
	@Override
	public String getLastUpdateUserId() {
		if (_lastUpdateUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUserId;
		}
	}

	@Override
	public void setLastUpdateUserId(String lastUpdateUserId) {
		_lastUpdateUserId = lastUpdateUserId;
	}

	@JSON
	@Override
	public Date getLastUpdateTimestamp() {
		return _lastUpdateTimestamp;
	}

	@Override
	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		_lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmailReminder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailReminder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmailReminder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailReminderImpl emailReminderImpl = new EmailReminderImpl();

		emailReminderImpl.setEmailReminderId(getEmailReminderId());
		emailReminderImpl.setSubmitterName(getSubmitterName());
		emailReminderImpl.setSubmitterEmailId(getSubmitterEmailId());
		emailReminderImpl.setReminderNumber(getReminderNumber());
		emailReminderImpl.setScheduleTimestamp(getScheduleTimestamp());
		emailReminderImpl.setEmailSubjectText(getEmailSubjectText());
		emailReminderImpl.setEmailBodyText(getEmailBodyText());
		emailReminderImpl.setStatusCode(getStatusCode());
		emailReminderImpl.setCreateUserId(getCreateUserId());
		emailReminderImpl.setCreateTimestamp(getCreateTimestamp());
		emailReminderImpl.setLastUpdateUserId(getLastUpdateUserId());
		emailReminderImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());

		emailReminderImpl.resetOriginalValues();

		return emailReminderImpl;
	}

	@Override
	public int compareTo(EmailReminder emailReminder) {
		long primaryKey = emailReminder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmailReminder)) {
			return false;
		}

		EmailReminder emailReminder = (EmailReminder)obj;

		long primaryKey = emailReminder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmailReminderModelImpl emailReminderModelImpl = this;

		emailReminderModelImpl._originalEmailReminderId = emailReminderModelImpl._emailReminderId;

		emailReminderModelImpl._setOriginalEmailReminderId = false;

		emailReminderModelImpl._originalScheduleTimestamp = emailReminderModelImpl._scheduleTimestamp;

		emailReminderModelImpl._originalStatusCode = emailReminderModelImpl._statusCode;

		emailReminderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailReminder> toCacheModel() {
		EmailReminderCacheModel emailReminderCacheModel = new EmailReminderCacheModel();

		emailReminderCacheModel.emailReminderId = getEmailReminderId();

		emailReminderCacheModel.submitterName = getSubmitterName();

		String submitterName = emailReminderCacheModel.submitterName;

		if ((submitterName != null) && (submitterName.length() == 0)) {
			emailReminderCacheModel.submitterName = null;
		}

		emailReminderCacheModel.submitterEmailId = getSubmitterEmailId();

		String submitterEmailId = emailReminderCacheModel.submitterEmailId;

		if ((submitterEmailId != null) && (submitterEmailId.length() == 0)) {
			emailReminderCacheModel.submitterEmailId = null;
		}

		emailReminderCacheModel.reminderNumber = getReminderNumber();

		Date scheduleTimestamp = getScheduleTimestamp();

		if (scheduleTimestamp != null) {
			emailReminderCacheModel.scheduleTimestamp = scheduleTimestamp.getTime();
		}
		else {
			emailReminderCacheModel.scheduleTimestamp = Long.MIN_VALUE;
		}

		emailReminderCacheModel.emailSubjectText = getEmailSubjectText();

		String emailSubjectText = emailReminderCacheModel.emailSubjectText;

		if ((emailSubjectText != null) && (emailSubjectText.length() == 0)) {
			emailReminderCacheModel.emailSubjectText = null;
		}

		emailReminderCacheModel.emailBodyText = getEmailBodyText();

		String emailBodyText = emailReminderCacheModel.emailBodyText;

		if ((emailBodyText != null) && (emailBodyText.length() == 0)) {
			emailReminderCacheModel.emailBodyText = null;
		}

		emailReminderCacheModel.statusCode = getStatusCode();

		String statusCode = emailReminderCacheModel.statusCode;

		if ((statusCode != null) && (statusCode.length() == 0)) {
			emailReminderCacheModel.statusCode = null;
		}

		emailReminderCacheModel.createUserId = getCreateUserId();

		String createUserId = emailReminderCacheModel.createUserId;

		if ((createUserId != null) && (createUserId.length() == 0)) {
			emailReminderCacheModel.createUserId = null;
		}

		Date createTimestamp = getCreateTimestamp();

		if (createTimestamp != null) {
			emailReminderCacheModel.createTimestamp = createTimestamp.getTime();
		}
		else {
			emailReminderCacheModel.createTimestamp = Long.MIN_VALUE;
		}

		emailReminderCacheModel.lastUpdateUserId = getLastUpdateUserId();

		String lastUpdateUserId = emailReminderCacheModel.lastUpdateUserId;

		if ((lastUpdateUserId != null) && (lastUpdateUserId.length() == 0)) {
			emailReminderCacheModel.lastUpdateUserId = null;
		}

		Date lastUpdateTimestamp = getLastUpdateTimestamp();

		if (lastUpdateTimestamp != null) {
			emailReminderCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
		}
		else {
			emailReminderCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
		}

		return emailReminderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{emailReminderId=");
		sb.append(getEmailReminderId());
		sb.append(", submitterName=");
		sb.append(getSubmitterName());
		sb.append(", submitterEmailId=");
		sb.append(getSubmitterEmailId());
		sb.append(", reminderNumber=");
		sb.append(getReminderNumber());
		sb.append(", scheduleTimestamp=");
		sb.append(getScheduleTimestamp());
		sb.append(", emailSubjectText=");
		sb.append(getEmailSubjectText());
		sb.append(", emailBodyText=");
		sb.append(getEmailBodyText());
		sb.append(", statusCode=");
		sb.append(getStatusCode());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", createTimestamp=");
		sb.append(getCreateTimestamp());
		sb.append(", lastUpdateUserId=");
		sb.append(getLastUpdateUserId());
		sb.append(", lastUpdateTimestamp=");
		sb.append(getLastUpdateTimestamp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ihg.me2.model.EmailReminder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>emailReminderId</column-name><column-value><![CDATA[");
		sb.append(getEmailReminderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitterName</column-name><column-value><![CDATA[");
		sb.append(getSubmitterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submitterEmailId</column-name><column-value><![CDATA[");
		sb.append(getSubmitterEmailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reminderNumber</column-name><column-value><![CDATA[");
		sb.append(getReminderNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheduleTimestamp</column-name><column-value><![CDATA[");
		sb.append(getScheduleTimestamp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailSubjectText</column-name><column-value><![CDATA[");
		sb.append(getEmailSubjectText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailBodyText</column-name><column-value><![CDATA[");
		sb.append(getEmailBodyText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusCode</column-name><column-value><![CDATA[");
		sb.append(getStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTimestamp</column-name><column-value><![CDATA[");
		sb.append(getCreateTimestamp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUserId</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateTimestamp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmailReminder.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmailReminder.class
		};
	private long _emailReminderId;
	private long _originalEmailReminderId;
	private boolean _setOriginalEmailReminderId;
	private String _submitterName;
	private String _submitterEmailId;
	private int _reminderNumber;
	private Date _scheduleTimestamp;
	private Date _originalScheduleTimestamp;
	private String _emailSubjectText;
	private String _emailBodyText;
	private String _statusCode;
	private String _originalStatusCode;
	private String _createUserId;
	private Date _createTimestamp;
	private String _lastUpdateUserId;
	private Date _lastUpdateTimestamp;
	private long _columnBitmask;
	private EmailReminder _escapedModel;
}