/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.me2.model.impl;

import com.ihg.me2.model.EmailAttachment;
import com.ihg.me2.model.EmailAttachmentAttachmentFileTextBlobModel;
import com.ihg.me2.model.EmailAttachmentModel;
import com.ihg.me2.model.EmailAttachmentSoap;
import com.ihg.me2.service.EmailAttachmentLocalServiceUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EmailAttachment service. Represents a row in the &quot;email_attachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ihg.me2.model.EmailAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmailAttachmentImpl}.
 * </p>
 *
 * @author vishal.rangras
 * @see EmailAttachmentImpl
 * @see com.ihg.me2.model.EmailAttachment
 * @see com.ihg.me2.model.EmailAttachmentModel
 * @generated
 */
@JSON(strict = true)
public class EmailAttachmentModelImpl extends BaseModelImpl<EmailAttachment>
	implements EmailAttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a email attachment model instance should use the {@link com.ihg.me2.model.EmailAttachment} interface instead.
	 */
	public static final String TABLE_NAME = "email_attachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "EMAIL_ATTACHMENT_ID", Types.BIGINT },
			{ "EMAIL_REMINDER_ID", Types.BIGINT },
			{ "ATTACHMENT_FILE_NAME", Types.VARCHAR },
			{ "ATTACHMENT_FILE_TEXT", Types.BLOB },
			{ "CREATE_USER_ID", Types.VARCHAR },
			{ "CREATE_TIME_STAMP", Types.TIMESTAMP },
			{ "LAST_UPDATE_USER_ID", Types.VARCHAR },
			{ "LAST_UPDATE_TIMESTAMP", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table email_attachment (EMAIL_ATTACHMENT_ID LONG not null primary key,EMAIL_REMINDER_ID LONG,ATTACHMENT_FILE_NAME VARCHAR(250) null,ATTACHMENT_FILE_TEXT BLOB,CREATE_USER_ID VARCHAR(50) null,CREATE_TIME_STAMP DATE null,LAST_UPDATE_USER_ID VARCHAR(50) null,LAST_UPDATE_TIMESTAMP DATE null)";
	public static final String TABLE_SQL_DROP = "drop table email_attachment";
	public static final String ORDER_BY_JPQL = " ORDER BY emailAttachment.EMAIL_ATTACHMENT_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY email_attachment.EMAIL_ATTACHMENT_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ihg.me2.model.EmailAttachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ihg.me2.model.EmailAttachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ihg.me2.model.EmailAttachment"),
			true);
	public static long EMAIL_ATTACHMENT_ID_COLUMN_BITMASK = 1L;
	public static long EMAILREMINDERID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EmailAttachment toModel(EmailAttachmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EmailAttachment model = new EmailAttachmentImpl();

		model.setEMAIL_ATTACHMENT_ID(soapModel.getEMAIL_ATTACHMENT_ID());
		model.setEmailReminderId(soapModel.getEmailReminderId());
		model.setAttachmentFileName(soapModel.getAttachmentFileName());
		model.setAttachmentFileText(soapModel.getAttachmentFileText());
		model.setCreateUserId(soapModel.getCreateUserId());
		model.setCreateTimestamp(soapModel.getCreateTimestamp());
		model.setLastUpdateUserId(soapModel.getLastUpdateUserId());
		model.setLastUpdateTimestamp(soapModel.getLastUpdateTimestamp());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EmailAttachment> toModels(
		EmailAttachmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EmailAttachment> models = new ArrayList<EmailAttachment>(soapModels.length);

		for (EmailAttachmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ihg.me2.model.EmailAttachment"));

	public EmailAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _EMAIL_ATTACHMENT_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEMAIL_ATTACHMENT_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _EMAIL_ATTACHMENT_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmailAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return EmailAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("EMAIL_ATTACHMENT_ID", getEMAIL_ATTACHMENT_ID());
		attributes.put("emailReminderId", getEmailReminderId());
		attributes.put("attachmentFileName", getAttachmentFileName());
		attributes.put("attachmentFileText", getAttachmentFileText());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("createTimestamp", getCreateTimestamp());
		attributes.put("lastUpdateUserId", getLastUpdateUserId());
		attributes.put("lastUpdateTimestamp", getLastUpdateTimestamp());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long EMAIL_ATTACHMENT_ID = (Long)attributes.get("EMAIL_ATTACHMENT_ID");

		if (EMAIL_ATTACHMENT_ID != null) {
			setEMAIL_ATTACHMENT_ID(EMAIL_ATTACHMENT_ID);
		}

		Long emailReminderId = (Long)attributes.get("emailReminderId");

		if (emailReminderId != null) {
			setEmailReminderId(emailReminderId);
		}

		String attachmentFileName = (String)attributes.get("attachmentFileName");

		if (attachmentFileName != null) {
			setAttachmentFileName(attachmentFileName);
		}

		Blob attachmentFileText = (Blob)attributes.get("attachmentFileText");

		if (attachmentFileText != null) {
			setAttachmentFileText(attachmentFileText);
		}

		String createUserId = (String)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		Date createTimestamp = (Date)attributes.get("createTimestamp");

		if (createTimestamp != null) {
			setCreateTimestamp(createTimestamp);
		}

		String lastUpdateUserId = (String)attributes.get("lastUpdateUserId");

		if (lastUpdateUserId != null) {
			setLastUpdateUserId(lastUpdateUserId);
		}

		Date lastUpdateTimestamp = (Date)attributes.get("lastUpdateTimestamp");

		if (lastUpdateTimestamp != null) {
			setLastUpdateTimestamp(lastUpdateTimestamp);
		}
	}

	@JSON
	@Override
	public long getEMAIL_ATTACHMENT_ID() {
		return _EMAIL_ATTACHMENT_ID;
	}

	@Override
	public void setEMAIL_ATTACHMENT_ID(long EMAIL_ATTACHMENT_ID) {
		_columnBitmask |= EMAIL_ATTACHMENT_ID_COLUMN_BITMASK;

		if (!_setOriginalEMAIL_ATTACHMENT_ID) {
			_setOriginalEMAIL_ATTACHMENT_ID = true;

			_originalEMAIL_ATTACHMENT_ID = _EMAIL_ATTACHMENT_ID;
		}

		_EMAIL_ATTACHMENT_ID = EMAIL_ATTACHMENT_ID;
	}

	public long getOriginalEMAIL_ATTACHMENT_ID() {
		return _originalEMAIL_ATTACHMENT_ID;
	}

	@JSON
	@Override
	public long getEmailReminderId() {
		return _emailReminderId;
	}

	@Override
	public void setEmailReminderId(long emailReminderId) {
		_columnBitmask |= EMAILREMINDERID_COLUMN_BITMASK;

		if (!_setOriginalEmailReminderId) {
			_setOriginalEmailReminderId = true;

			_originalEmailReminderId = _emailReminderId;
		}

		_emailReminderId = emailReminderId;
	}

	public long getOriginalEmailReminderId() {
		return _originalEmailReminderId;
	}

	@JSON
	@Override
	public String getAttachmentFileName() {
		if (_attachmentFileName == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentFileName;
		}
	}

	@Override
	public void setAttachmentFileName(String attachmentFileName) {
		_attachmentFileName = attachmentFileName;
	}

	@JSON
	@Override
	public Blob getAttachmentFileText() {
		if (_attachmentFileTextBlobModel == null) {
			try {
				_attachmentFileTextBlobModel = EmailAttachmentLocalServiceUtil.getAttachmentFileTextBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_attachmentFileTextBlobModel != null) {
			blob = _attachmentFileTextBlobModel.getAttachmentFileTextBlob();
		}

		return blob;
	}

	@Override
	public void setAttachmentFileText(Blob attachmentFileText) {
		if (_attachmentFileTextBlobModel == null) {
			_attachmentFileTextBlobModel = new EmailAttachmentAttachmentFileTextBlobModel(getPrimaryKey(),
					attachmentFileText);
		}
		else {
			_attachmentFileTextBlobModel.setAttachmentFileTextBlob(attachmentFileText);
		}
	}

	@JSON
	@Override
	public String getCreateUserId() {
		if (_createUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _createUserId;
		}
	}

	@Override
	public void setCreateUserId(String createUserId) {
		_createUserId = createUserId;
	}

	@JSON
	@Override
	public Date getCreateTimestamp() {
		return _createTimestamp;
	}

	@Override
	public void setCreateTimestamp(Date createTimestamp) {
		_createTimestamp = createTimestamp;
	}

	@JSON
	@Override
	public String getLastUpdateUserId() {
		if (_lastUpdateUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastUpdateUserId;
		}
	}

	@Override
	public void setLastUpdateUserId(String lastUpdateUserId) {
		_lastUpdateUserId = lastUpdateUserId;
	}

	@JSON
	@Override
	public Date getLastUpdateTimestamp() {
		return _lastUpdateTimestamp;
	}

	@Override
	public void setLastUpdateTimestamp(Date lastUpdateTimestamp) {
		_lastUpdateTimestamp = lastUpdateTimestamp;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EmailAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmailAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmailAttachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmailAttachmentImpl emailAttachmentImpl = new EmailAttachmentImpl();

		emailAttachmentImpl.setEMAIL_ATTACHMENT_ID(getEMAIL_ATTACHMENT_ID());
		emailAttachmentImpl.setEmailReminderId(getEmailReminderId());
		emailAttachmentImpl.setAttachmentFileName(getAttachmentFileName());
		emailAttachmentImpl.setCreateUserId(getCreateUserId());
		emailAttachmentImpl.setCreateTimestamp(getCreateTimestamp());
		emailAttachmentImpl.setLastUpdateUserId(getLastUpdateUserId());
		emailAttachmentImpl.setLastUpdateTimestamp(getLastUpdateTimestamp());

		emailAttachmentImpl.resetOriginalValues();

		return emailAttachmentImpl;
	}

	@Override
	public int compareTo(EmailAttachment emailAttachment) {
		long primaryKey = emailAttachment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmailAttachment)) {
			return false;
		}

		EmailAttachment emailAttachment = (EmailAttachment)obj;

		long primaryKey = emailAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmailAttachmentModelImpl emailAttachmentModelImpl = this;

		emailAttachmentModelImpl._originalEMAIL_ATTACHMENT_ID = emailAttachmentModelImpl._EMAIL_ATTACHMENT_ID;

		emailAttachmentModelImpl._setOriginalEMAIL_ATTACHMENT_ID = false;

		emailAttachmentModelImpl._originalEmailReminderId = emailAttachmentModelImpl._emailReminderId;

		emailAttachmentModelImpl._setOriginalEmailReminderId = false;

		emailAttachmentModelImpl._attachmentFileTextBlobModel = null;

		emailAttachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmailAttachment> toCacheModel() {
		EmailAttachmentCacheModel emailAttachmentCacheModel = new EmailAttachmentCacheModel();

		emailAttachmentCacheModel.EMAIL_ATTACHMENT_ID = getEMAIL_ATTACHMENT_ID();

		emailAttachmentCacheModel.emailReminderId = getEmailReminderId();

		emailAttachmentCacheModel.attachmentFileName = getAttachmentFileName();

		String attachmentFileName = emailAttachmentCacheModel.attachmentFileName;

		if ((attachmentFileName != null) && (attachmentFileName.length() == 0)) {
			emailAttachmentCacheModel.attachmentFileName = null;
		}

		emailAttachmentCacheModel.createUserId = getCreateUserId();

		String createUserId = emailAttachmentCacheModel.createUserId;

		if ((createUserId != null) && (createUserId.length() == 0)) {
			emailAttachmentCacheModel.createUserId = null;
		}

		Date createTimestamp = getCreateTimestamp();

		if (createTimestamp != null) {
			emailAttachmentCacheModel.createTimestamp = createTimestamp.getTime();
		}
		else {
			emailAttachmentCacheModel.createTimestamp = Long.MIN_VALUE;
		}

		emailAttachmentCacheModel.lastUpdateUserId = getLastUpdateUserId();

		String lastUpdateUserId = emailAttachmentCacheModel.lastUpdateUserId;

		if ((lastUpdateUserId != null) && (lastUpdateUserId.length() == 0)) {
			emailAttachmentCacheModel.lastUpdateUserId = null;
		}

		Date lastUpdateTimestamp = getLastUpdateTimestamp();

		if (lastUpdateTimestamp != null) {
			emailAttachmentCacheModel.lastUpdateTimestamp = lastUpdateTimestamp.getTime();
		}
		else {
			emailAttachmentCacheModel.lastUpdateTimestamp = Long.MIN_VALUE;
		}

		return emailAttachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{EMAIL_ATTACHMENT_ID=");
		sb.append(getEMAIL_ATTACHMENT_ID());
		sb.append(", emailReminderId=");
		sb.append(getEmailReminderId());
		sb.append(", attachmentFileName=");
		sb.append(getAttachmentFileName());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", createTimestamp=");
		sb.append(getCreateTimestamp());
		sb.append(", lastUpdateUserId=");
		sb.append(getLastUpdateUserId());
		sb.append(", lastUpdateTimestamp=");
		sb.append(getLastUpdateTimestamp());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.ihg.me2.model.EmailAttachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>EMAIL_ATTACHMENT_ID</column-name><column-value><![CDATA[");
		sb.append(getEMAIL_ATTACHMENT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailReminderId</column-name><column-value><![CDATA[");
		sb.append(getEmailReminderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentFileName</column-name><column-value><![CDATA[");
		sb.append(getAttachmentFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createTimestamp</column-name><column-value><![CDATA[");
		sb.append(getCreateTimestamp());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateUserId</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastUpdateTimestamp</column-name><column-value><![CDATA[");
		sb.append(getLastUpdateTimestamp());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmailAttachment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmailAttachment.class
		};
	private long _EMAIL_ATTACHMENT_ID;
	private long _originalEMAIL_ATTACHMENT_ID;
	private boolean _setOriginalEMAIL_ATTACHMENT_ID;
	private long _emailReminderId;
	private long _originalEmailReminderId;
	private boolean _setOriginalEmailReminderId;
	private String _attachmentFileName;
	private EmailAttachmentAttachmentFileTextBlobModel _attachmentFileTextBlobModel;
	private String _createUserId;
	private Date _createTimestamp;
	private String _lastUpdateUserId;
	private Date _lastUpdateTimestamp;
	private long _columnBitmask;
	private EmailAttachment _escapedModel;
}